#!/usr/bin/colormake

# Cross-compiling magic happens here (or not)
CC=$(CROSS)gcc
LD=$(CROSS)ld
AR=$(CROSS)ar
PKG_CONFIG=$(CROSS)pkg-config
TARGET_CFLAGS ?= -fpic -I/usr/include/libev
TARGET_CLINK ?= -lev -llua5.1
TARGET_OBJ ?= 

OPT ?= -g -O3
CFLAGS ?= -std=c99 -fno-strict-aliasing -I../include/ -I.. $(TARGET_CFLAGS) $(OPT)
CWARN ?= -pedantic -Wall -W
CLINK ?= -L. -lpthread -lssl -lcrypto -lm $(TARGET_CLINK)

TOBJ = sha1_test.o

OBJ = pkerror.o pkproto.o pkconn.o pkblocker.o pkmanager.o pklua.o \
      pklogging.o pkstate.o pkhooks.o utils.o pd_sha1.o pkwatchdog.o \
      pagekite.o \
      $(TARGET_OBJ)
HDRS = pkcommon.h pkutils.h pkstate.h pkhooks.h pkconn.h pkerror.h pkproto.h \
       pklogging.h pkmanager.h pklua.h pd_sha1.h pkwatchdog.h Makefile.pk \
       ../include/pagekite.h

ROBJ = pkrelay.o
RHDRS = pkrelay.h

PK_TRACE ?= 0
PK_MEMORY_CANARIES ?= 0
PK_TESTS ?= 1
HAVE_OPENSSL ?= 1
HAVE_IPV6 ?= 1
HAVE_LUA ?= 1

DEFINES=-DHAVE_IPV6=$(HAVE_IPV6) \
        -DHAVE_OPENSSL=$(HAVE_OPENSSL) \
        -DHAVE_LUA=$(HAVE_LUA) \
        -DPK_MEMORY_CANARIES=$(PK_MEMORY_CANARIES) \
        -DPK_TRACE=$(PK_TRACE) \
        -DPK_TESTS=$(PK_TESTS)

NDK_PROJECT_PATH ?= "/home/bre/Projects/android-ndk-r8"

default: libpagekite-agpl.so libpagekite.so libpagekite.a

all: runtests libpagekite.so

runtests: tests
	@./tests && echo Tests passed || echo Tests FAILED.

#android: clean
android:
	@$(NDK_PROJECT_PATH)/ndk-build

windows: .win32 libpagekite.dll

.win32:
	@echo Switching to win32 build mode
	@make -f Makefile.pk clean
	@touch .win32

.unix:
	@echo Switching to unix build mode
	@make -f Makefile.pk clean
	@touch .unix

tests: .unix tests.o $(OBJ) $(TOBJ)
	$(CC) $(CFLAGS) -o tests tests.o $(OBJ) $(TOBJ) $(CLINK)

libpagekite.a: .unix $(OBJ)
	$(AR) rcs libpagekite.a $(OBJ)

libpagekite.so: .unix $(OBJ)
	$(CC) $(CFLAGS) -shared -o libpagekite.so $(OBJ) $(CLINK)

libpagekite-agpl.so: .unix $(OBJ) $(ROBJ)
	$(CC) $(CFLAGS) -shared -o libpagekite-agpl.so $(OBJ) $(ROBJ) $(CLINK)

pklualua.h: pklua.lua Makefile.pk ../contrib/plugins
	cat pklua.lua |grep -v -e '^return ' >pklua_combined.lua
	cat ../contrib/plugins/*.lua >>pklua_combined.lua
	echo 'return pklua' >>pklua_combined.lua
	../tools/embedfiles.py pklua_combined.lua \
          |sed -e 's/embedded_file_data_0/pklualua/' >pklualua.h
	rm -f pklua_combined.lua

pagekiter: pagekiter.o $(OBJ) $(ROBJ)
	$(CC) $(CFLAGS) -o pagekiter pagekiter.o $(OBJ) $(ROBJ) $(CLINK)

libpagekite.dll: .win32 $(OBJ)
	$(CC) -shared -o libpagekite.dll $(OBJ) $(CLINK) \
              -Wl,--out-implib,libpagekite_dll.a

evwrap.o: mxe/evwrap.c
	$(CC) $(CFLAGS) -w -c mxe/evwrap.c

pagekite.o: pagekite.c
	$(CC) $(CFLAGS) $(CWARN) $(DEFINES) -DBUILDING_PAGEKITE_DLL=1 -c $<

version: pagekite.h.in
	sed -e "s/@DATE@/`date '+%y%m%d'`/g" <pagekite.h.in >../include/pagekite.h

clean:
	rm -vf tests pagekiter *.[oa] *.so *.exe *.dll .unix .win32

allclean: clean
	find . -name '*.o' |xargs rm -vf

.c.o:
	$(CC) $(CFLAGS) $(CWARN) $(DEFINES) -c $<

pagekite.o: $(HDRS)
pagekiter.o: $(HDRS) $(RHDRS)
pagekite-jni.o: $(HDRS)
pkblocker.o: $(HDRS)
pkhooks.o: $(HDRS)
pklua.o: $(HDRS) pklualua.h
pkconn.o: pkcommon.h pkutils.h pkerror.h pklogging.h
pkerror.o: pkcommon.h pkutils.h pkerror.h pklogging.h
pklogging.o: pkcommon.h pkstate.h pkconn.h pkproto.h pklogging.h
pkmanager.o: $(HDRS)
pkproto.o: pkcommon.h pd_sha1.h pkutils.h pkconn.h pkproto.h pklogging.h pkerror.h
pd_sha1.o: pkcommon.h pd_sha1.h
sha1_test.o: pkcommon.h pd_sha1.h
tests.o: pkstate.h
utils.o: pkcommon.h
evwrap.o: mxe/evwrap.h
